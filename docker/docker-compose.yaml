version: "2.1"

services:

  # Kafka Setup Start
  zookeeper:
    image: confluentinc/cp-zookeeper
    ports:
     - "32181"
    healthcheck:
      test: ps ax | grep zookeeper
      interval: 5s
      retries: 10
    environment:
     - ZOOKEEPER_CLIENT_PORT=32181
     - ZOOKEEPER_TICK_TIME=2000
    networks:
      micro-commerce:
        aliases:
         - zookeeper

  kafka:
    image: confluentinc/cp-kafka
    ports:
     - "29092"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ps ax | grep kafka
      interval: 5s
      retries: 10
    environment:
     - KAFKA_ZOOKEEPER_CONNECT=zookeeper:32181
     - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29092
     - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    networks:
      micro-commerce:
        aliases:
         - kafka

  kafka-schema-registry:
    image: confluentinc/cp-schema-registry
    ports:
     - "8081"
    environment:
     - SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL=zookeeper:32181
     - SCHEMA_REGISTRY_HOST_NAME=kafka-schema-registry
     - SCHEMA_REGISTRY_LISTENERS=http://0.0.0.0:8081
     - SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_ORIGIN=*
     - SCHEMA_REGISTRY_ACCESS_CONTROL_ALLOW_METHODS=GET,POST,PUT,OPTIONS,DELETE
    networks:
      micro-commerce:
        aliases:
         - kafka-schema-registry

  kafka-rest:
    image: confluentinc/cp-kafka-rest
    ports:
     - "8082"
    environment:
     - KAFKA_REST_ZOOKEEPER_CONNECT=zookeeper:32181
     - KAFKA_REST_LISTENERS=http://0.0.0.0:8082
     - KAFKA_REST_SCHEMA_REGISTRY_URL=http://kafka-schema-registry:8081
     - KAFKA_REST_HOST_NAME=kafka-rest
     - KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS=30000
     - KAFKA_REST_ACCESS_CONTROL_ALLOW_ORIGIN=*
     - KAFKA_REST_ACCESS_CONTROL_ALLOW_METHODS=GET,POST,PUT,OPTIONS,DELETE
    networks:
      micro-commerce:
        aliases:
         - kafka-rest
  # Kafka Setup End

  # Cassandra Containers Start
  cassandra:
    image: cassandra
    ports:
     - "7000"
     - "7001"
     - "9042"
    healthcheck:
      test: ps ax | grep cassandra
      interval: 5s
      retries: 10
    networks:
      micro-commerce:
        aliases:
         - cassandra
  # Cassandra Containers End

  # API Gateway Start
  kong-migration:
    image: kong
    depends_on:
      cassandra:
        condition: service_healthy
    restart: on-failure
    environment:
      - KONG_DATABASE=cassandra
      - KONG_CASSANDRA_CONTACT_POINTS=cassandra
    command: kong migrations up
    networks:
      micro-commerce:
        aliases:
         - kong-migration

  kong:
    image: kong
    depends_on:
      cassandra:
        condition: service_healthy
      kong-migration:
        condition: service_started
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/status"]
    environment:
      - KONG_DATABASE=cassandra
      - KONG_CASSANDRA_CONTACT_POINTS=cassandra
      - KONG_PROXY_ACCESS_LOG=/dev/stdout
      - KONG_ADMIN_ACCESS_LOG=/dev/stdout
      - KONG_PROXY_ERROR_LOG=/dev/stderr
      - KONG_ADMIN_ERROR_LOG=/dev/stderr
      - KONG_PROXY_LISTEN=0.0.0.0:8080
      - KONG_ADMIN_LISTEN=0.0.0.0:8081
    ports:
      - "8080:8080"
      - "8081:8081"
      - "8443:8443"
      - "8444:8444"
    networks:
      micro-commerce:
        aliases:
         - kong
  # API Gateway End

  # Project Containers Start
  product-command:
    image: org.micro.commerce/product-command:1.0-SNAPSHOT
    ports:
     - "8080"
    depends_on:
      kafka:
        condition: service_healthy
      product-query:
        condition: service_healthy
    networks:
      micro-commerce:
        aliases:
         - product-command

  product-query:
    image: org.micro.commerce/product-query:1.0-SNAPSHOT
    ports:
     - "8080"
    depends_on:
      cassandra:
        condition: service_healthy
      kafka:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
    restart: always
    networks:
      micro-commerce:
        aliases:
         - product-query
  # Project Containers End

networks:
  micro-commerce: